{"version":3,"sources":["libs/Pagination/index.js","pages/Experiment/Creating/index.module.scss","pages/Experiment/Creating/ScenarioStep.js","pages/Experiment/Creating/MonitorStep.js","pages/Experiment/Creating/NameStep.js","pages/Experiment/Creating/ExperimentSteps.js","pages/Experiment/Creating/MachineStep.js","pages/Experiment/Creating/HostExperiment.js","assets/images/experiment/linux.svg","assets/images/experiment/kubernetes.svg","assets/images/experiment/application.svg","pages/Experiment/Creating/KubernetesExperiment.js","pages/Experiment/Creating/index.js"],"names":["GenPagination","page","pageSize","total","onChange","showTotal","range","id","values","current","module","exports","TreeNode","Sider","Content","Footer","FormLayout","labelCol","span","wrapperCol","ScenarioStep","props","scenarioForm","React","createRef","onCategorySelect","selectedKeys","getScenariosPageable","dimension","onScenarioCategoryChanged","scenarioCategoryIdSelected","onScenarioChanged","categoryId","scopeType","status","ScenarioConstants","STATUS_PUBLISH","code","onScenarioSelect","scenarioId","getScenarioById","machinesSelected","machines","updateScenarioSelected","parameters","_","isEmpty","params","forEach","value","key","push","name","scenarioSelected","categoryIds","scenario","this","getScenarioCategories","event","scenarioSelectedFromExperiment","data","map","item","children","title","dataRef","scenarioCategoryTreeRender","finishFunc","handleError","validateFields","then","catch","error","errors","errorFields","message","Errors","PARAMETER_ERROR","param","categories","length","firstCategoryId","i","parentId","scenarios","loading","spinning","className","styles","stepLayout","defaultExpandAll","defaultSelectedKeys","onSelect","bind","grid","gutter","column","dataSource","pagination","renderItem","Item","stepCardSelected","stepCardNoSelected","hoverable","onClick","style","textAlign","height","dashed","ref","initialValues","getScenarioParameterValues","label","help","description","rules","required","disabled","component","editable","Component","connect","state","experiment","experimentCreating","toJS","experimentName","dispatch","clearResult","Actions","clearExperimentCreatingResult","query","MonitorStep","metricForm","initialized","queryMetricCategory","experimentId","ExperimentCreating","getExperimentId","isCreatingFromSelected","metricSelected","setState","info","selected","selectedNodes","onMetricChanged","metric","metricCategoryTreeRender","undefined","updateMetricSelected","metricCategories","finished","initSelectedFinished","getMetricSelectedKey","onMetricSelect","getMetricInitialValues","placeholder","NameStep","experimentNameForm","onExperimentNameFormChange","onExperimentNameChanged","getExperimentName","Date","getTime","join","marginTop","Step","StepsConfig","ExperimentSteps","onCreatingTabChange","machineEvent","child","_machine","scenarioEvent","_scenario","monitorEvent","_monitor","onCreatingNext","submitMachineForm","onFinish","changeCurrent","onCreatingPre","getMachines","target","split","machineId","ip","createExperiment","collect","metrics","updateExperiment","machineForm","submit","machineStep","direction","size","s","stepContent","fadeIn","step","stepsAction","marginRight","type","onMachinesChanged","MachineStep","transferFilter","inputValue","option","indexOf","getTargetKeys","keys","ExperimentCreatingTabKey","HOST","machine","NODE","nodeName","POD","namespace","podName","CONTAINER","containerName","transferChange","targetKeys","resources","creatingFromMachine","location","machineIp","titles","stepMachineContent","showSearch","filterOption","render","listStyle","width","creating","HostExperiment","getMachinesForHostPageable","showIcon","closable","hosts","original","TabPane","NodeNameTips","TextArea","SubMenu","PodNamespaceTips","PodNameTips","ContainerNameTips","EnableCollectAlert","DisableCollectAlert","KubernetesExperiment","containerFormRef","podFormRef","nodeFormRef","collectContainersEnabledRender","podPage","podPageSize","podTotal","containers","getPodsPageable","display","QuestionCircleOutlined","collectDisabledRender","formRef","List","fields","add","remove","field","padding","align","fieldKey","MinusCircleOutlined","block","icon","PlusOutlined","collectPodsEnabledRender","pods","collectNodesEnabledRender","nodePage","nodePageSize","nodeTotal","nodes","getNodesPageable","machinesRender","defaultActiveKey","onTargetTabChange","tab","ContainerOutlined","BorderOutlined","RobotOutlined","onDimensionChanged","getMachinesByDimension","activeKey","getClusterInfo","queryCollectStatus","getKubernetesNamespaces","getMachinesForPodPageable","getMachinesForNodePageable","ExperimentDimensions","imgAlt","imgSrc","linuxLogo","content","kubernetesLogo","applicationLogo","history","getExperimentById","KUBERNETES","DEFAULT","getTabKey","experimentHeader","stepTab","onTabChange","bordered","cover","alt","src","queryString","parse","window","search","nextProps","request"],"mappings":"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","file":"static/js/18.1692b757.chunk.js","sourcesContent":["/*\n * Copyright 1999-2021 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {FormattedMessage} from \"react-intl\";\n\nexport const GenPagination = (page, pageSize, total, onChange) => {\n    let paginationProps = {\n        page: page,\n        pageSize: pageSize,\n        showTotal: (total, range) => <FormattedMessage id={'page.pagination.total'} values={{total: `${total}`}}/>,\n        current: page,\n        total: total,\n        onChange: onChange\n    };\n    return paginationProps\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stepTab\":\"Creating_stepTab__3BMO7\",\"stepContent\":\"Creating_stepContent__P1QJu\",\"stepMachineContent\":\"Creating_stepMachineContent__302PH\",\"step\":\"Creating_step__1DPKH\",\"fade-out\":\"Creating_fade-out__3dSyZ\",\"fade-in\":\"Creating_fade-in__38FKr\",\"stepsAction\":\"Creating_stepsAction__3OWNS\",\"stepLayout\":\"Creating_stepLayout__2bADC\",\"experimentHeader\":\"Creating_experimentHeader__M0RKZ\",\"stepCardSelected\":\"Creating_stepCardSelected__3goYs\",\"stepCardNoSelected\":\"Creating_stepCardNoSelected__YM1kw\"};","/*\n * Copyright 1999-2021 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport {ScenarioConstants} from \"../../../constants/ScenarioConstants\";\nimport _ from \"lodash\";\nimport {Card, Divider, Form, Input, Layout, List, Spin, Tree} from \"antd\";\nimport styles from \"./index.module.scss\";\nimport Actions from \"../../../actions/Actions\";\nimport {connect} from \"react-redux\";\nimport {Errors} from \"../../../constants/Errors\";\nimport {GenPagination} from \"../../../libs/Pagination\";\n\nconst {TreeNode} = Tree;\nconst {Sider, Content, Footer} = Layout;\n\nconst FormLayout = {\n    labelCol: {span: 8},\n    wrapperCol: {span: 12},\n};\n\nclass ScenarioStep extends React.Component {\n    scenarioForm = React.createRef();\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        const {\n            getScenarioCategories,\n            event,\n            dimension,\n            scenarioSelectedFromExperiment,\n            scenarioCategoryIdSelected\n        } = this.props;\n        event(this);\n        getScenarioCategories({dimension, scenarioCategoryIdSelected});\n        if (scenarioSelectedFromExperiment !== null) {\n            this.onScenarioSelect(scenarioSelectedFromExperiment.scenarioId);\n        }\n    }\n\n    onCategorySelect = (selectedKeys) => {\n        const {\n            getScenariosPageable,\n            dimension,\n            onScenarioCategoryChanged,\n            scenarioCategoryIdSelected,\n            onScenarioChanged,\n            page,\n            pageSize\n        } = this.props;\n        const categoryId = selectedKeys[0];\n        onScenarioChanged(null);\n        if (categoryId !== scenarioCategoryIdSelected) {\n            onScenarioCategoryChanged({categoryId});\n            getScenariosPageable({\n                categoryId: categoryId,\n                scopeType: dimension,\n                status: ScenarioConstants.STATUS_PUBLISH.code,\n                page,\n                pageSize,\n            })\n        }\n    }\n\n    onScenarioSelect = (scenarioId) => {\n        const {getScenarioById, machinesSelected, dimension} = this.props;\n        getScenarioById({scenarioId, dimension, machines: machinesSelected})\n    }\n\n    scenarioCategoryTreeRender(data) {\n        if (_.isEmpty(data)) {\n            return <span>暂无数据</span>\n        }\n        return data.map(item => {\n            if (item.children) {\n                return <TreeNode title={item.name} key={item.categoryId} dataRef={item}>\n                    {this.scenarioCategoryTreeRender(item.children)}\n                </TreeNode>\n            }\n            return <TreeNode title={item.name} key={item.categoryId} dataRef={item}/>\n        });\n    }\n\n    onFinish(finishFunc) {\n        const {handleError} = this.props;\n        if (this.scenarioForm.current) {\n            this.scenarioForm.current.validateFields().then(values => {\n                finishFunc();\n                this.updateScenarioSelected(values);\n            }).catch(error => {\n                const {errors} = error.errorFields[0];\n                const message = errors ? errors[0] : Errors.PARAMETER_ERROR.message;\n                handleError(Errors.PARAMETER_ERROR.code, message);\n            })\n        } else {\n            handleError(Errors.PARAMETER_ERROR.code, '必须选择一个场景');\n        }\n    }\n\n    updateScenarioSelected = (parameters) => {\n        if (_.isEmpty(parameters)) {\n            return;\n        }\n        const params = [];\n        _.forEach(parameters, (value, key) => {\n            return params.push({\n                name: key,\n                value: value,\n            });\n        })\n        const {scenarioSelected, scenarioCategoryIdSelected, onScenarioChanged} = this.props;\n        scenarioSelected.parameters = params;\n        scenarioSelected.categoryIds = [scenarioCategoryIdSelected];\n        onScenarioChanged({scenario: scenarioSelected});\n    }\n\n    getScenarioParameterValues() {\n        const {scenarioSelected} = this.props;\n        if (scenarioSelected === null) {\n            return {};\n        }\n        if (_.isEmpty(scenarioSelected.parameters)) {\n            return {};\n        }\n        const params = {};\n        scenarioSelected.parameters.map(param => {\n            params[param.name] = param.value\n        });\n        return params;\n    }\n\n    getScenariosList() {\n        const {\n            scenarioSelected,\n            categories,\n            dimension,\n            page,\n            pageSize,\n            getScenariosPageable,\n            scenarioCategoryIdSelected\n        } = this.props;\n        if (scenarioCategoryIdSelected !== '' || categories.length === 0) {\n            return;\n        }\n        let firstCategoryId = '';\n        if (scenarioSelected === null) {\n            firstCategoryId = categories[0].categoryId;\n            for (let i = 0; i < categories.length; i++) {\n                if (categories[i].parentId !== '') {\n                    firstCategoryId = categories[i].categoryId;\n                    break;\n                }\n            }\n        } else {\n            firstCategoryId = scenarioSelected.categoryId;\n        }\n        getScenariosPageable({\n            categoryId: firstCategoryId,\n            scopeType: dimension,\n            status: ScenarioConstants.STATUS_PUBLISH.code,\n            page,\n            pageSize,\n        })\n    }\n\n    render() {\n        const {\n            categories,\n            scenarios,\n            loading,\n            scenarioSelected,\n            getScenariosPageable,\n            page,\n            pageSize,\n            dimension,\n            total,\n            scenarioCategoryIdSelected\n        } = this.props;\n        return (\n            <Layout>\n                {\n                    <Spin spinning={loading}>\n                        <Layout className={styles.stepLayout}>\n                            <Sider>\n                                {\n                                    categories.length > 0 && <Tree\n                                        defaultExpandAll={true}\n                                        defaultSelectedKeys={[scenarioCategoryIdSelected]}\n                                        onSelect={this.onCategorySelect.bind(this)}\n                                    >\n                                        {this.scenarioCategoryTreeRender(categories)}\n                                    </Tree>\n                                }\n                            </Sider>\n                            <Layout>\n                                <Content>\n                                    <List\n                                        grid={{gutter: 8, column: 4}}\n                                        dataSource={scenarios}\n                                        pagination={GenPagination(page, pageSize, total, () => {\n                                            getScenariosPageable({\n                                                categoryId: scenarioCategoryIdSelected,\n                                                scopeType: dimension,\n                                                status: ScenarioConstants.STATUS_PUBLISH.code,\n                                                page,\n                                                pageSize,\n                                            })\n                                        })}\n                                        renderItem={item => (\n                                            <List.Item>\n                                                <Card\n                                                    className={scenarioSelected && item.scenarioId === scenarioSelected.scenarioId ?\n                                                        styles.stepCardSelected\n                                                        :\n                                                        styles.stepCardNoSelected}\n                                                    hoverable\n                                                    onClick={this.onScenarioSelect.bind(this, item.scenarioId)}\n                                                    style={{textAlign: 'center', height: 72}}\n                                                    title={null}\n                                                >\n                                                    {item.name}\n                                                </Card>\n                                            </List.Item>\n                                        )}\n                                    />\n                                </Content>\n                                <Divider dashed/>\n                                <Footer>\n                                    <Card title={<span>场景参数</span>}>\n                                        {\n                                            _.isEmpty(scenarioSelected) ? <div></div> :\n                                                _.isEmpty(scenarioSelected.parameters) ? '无参数' :\n                                                    <Form {...FormLayout} ref={this.scenarioForm}\n                                                          initialValues={this.getScenarioParameterValues()}>\n                                                        {scenarioSelected.parameters.map(param =>\n                                                            <Form.Item label={param.name} name={param.name}\n                                                                       help={param.description}\n                                                                       rules={[{required: param.required ? true : false}]}>\n                                                                <Input disabled={param.component ?\n                                                                    param.component.editable ? false : true : false}/>\n                                                            </Form.Item>\n                                                        )}\n                                                    </Form>\n                                        }\n                                    </Card>\n                                </Footer>\n                            </Layout>\n                        </Layout>\n                    </Spin>\n                }\n            </Layout>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const experiment = state.experimentCreating.toJS();\n    return {\n        loading: experiment.loading,\n        experimentName: experiment.experimentName,\n        categories: experiment.categories || [],\n        scenarios: experiment.scenarios.scenarios || [],\n        scenarioSelected: experiment.scenarioSelected,\n        dimension: experiment.dimension,\n        scenarioCategoryIdSelected: experiment.scenarioCategoryIdSelected,\n        page: experiment.scenarios.page,\n        pageSize: experiment.scenarios.pageSize,\n        total: experiment.scenarios.total,\n        machinesSelected: experiment.machinesSelected,\n        scenarioSelectedFromExperiment: experiment.scenarioSelectedFromExperiment,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clearResult: () => dispatch(Actions.clearExperimentCreatingResult()),\n        getScenarioCategories: query => dispatch(Actions.getScenarioCategories(query)),\n        getScenariosPageable: query => dispatch(Actions.getScenariosPageable(query)),\n        onScenarioCategoryChanged: categoryId => dispatch(Actions.onScenarioCategoryChanged(categoryId)),\n        onScenarioChanged: scenario => dispatch(Actions.onScenarioChanged(scenario)),\n        handleError: (code, message) => dispatch(Actions.handleError(code, message)),\n        getScenarioById: scenarioId => dispatch(Actions.getScenarioById(scenarioId)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScenarioStep);","/*\n * Copyright 1999-2021 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport _ from \"lodash\";\nimport {Form, Input, Layout, Spin, Tree} from \"antd\";\nimport styles from \"./index.module.scss\";\nimport Actions from \"../../../actions/Actions\";\nimport {connect} from \"react-redux\";\nimport ExperimentCreating from \"./index\";\nimport {Errors} from \"../../../constants/Errors\";\n\nconst {TreeNode} = Tree;\nconst {Sider, Content, Footer} = Layout;\n\nconst FormLayout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 16},\n};\n\nclass MonitorStep extends React.Component {\n    metricForm = React.createRef();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            initialized: false,\n        };\n    }\n\n    componentDidMount() {\n        const {queryMetricCategory, event} = this.props;\n        queryMetricCategory();\n        event(this);\n    }\n\n    isCreatingFromSelected() {\n        const experimentId = ExperimentCreating.getExperimentId();\n        return !_.isEmpty(experimentId);\n    }\n\n    initSelectedFinished() {\n        if (!this.isCreatingFromSelected()) {\n            return true;\n        }\n        const {metricSelected} = this.props;\n        const {initialized} = this.state;\n        return initialized || metricSelected !== null;\n    }\n\n    getMetricSelectedKey() {\n        const {metricSelected} = this.props;\n        const {initialized} = this.state;\n        const editing = this.isCreatingFromSelected();\n        if (editing && !initialized && !_.isEmpty(metricSelected)) {\n            this.setState({initialized: true});\n        }\n        return metricSelected ? metricSelected.categoryId : '';\n    }\n\n    onMetricSelect(selectedKeys, info) {\n        const selected = info.selectedNodes.length > 0 ? info.selectedNodes[0].dataRef : null;\n        const {onMetricChanged} = this.props;\n        if (_.isEmpty(selected)) {\n            return;\n        }\n        onMetricChanged({metric: selected});\n    }\n\n    metricCategoryTreeRender(data) {\n        if (_.isEmpty(data)) {\n            return <span>暂不支持接入</span>\n        }\n        return data.map(item => {\n            if (item.children) {\n                return <TreeNode title={item.name} key={item.categoryId} dataRef={item}>\n                    {this.metricCategoryTreeRender(item.children)}\n                </TreeNode>\n            }\n            return <TreeNode title={item.name} key={item.categoryId} dataRef={item}/>\n        })\n    }\n\n    updateMetricSelected(parameters) {\n        if (_.isEmpty(parameters)) {\n            return;\n        }\n        const params = [];\n        const {metricSelected, onMetricChanged} = this.props;\n        _.forEach(parameters, (value, key) => {\n            if (value === undefined || value === null) {\n                return;\n            }\n            if (key === \"metricName\") {\n                metricSelected.name = value;\n                return;\n            }\n            return params.push({\n                name: key,\n                value: value\n            });\n        })\n        metricSelected.params = params;\n        onMetricChanged({metric: metricSelected});\n    }\n\n    onFinish(finishFunc) {\n        if (this.metricForm.current) {\n            const {handleError} = this.props;\n            this.metricForm.current.validateFields().then(values => {\n                finishFunc();\n                this.updateMetricSelected(values);\n            }).catch(error => {\n                const {errors} = error.errorFields[0];\n                const message = errors?errors[0]:Errors.PARAMETER_ERROR.message;\n                handleError(Errors.PARAMETER_ERROR.code, message);\n            })\n        } else {\n            finishFunc();\n            this.updateMetricSelected([]);\n        }\n    }\n\n    getMetricInitialValues() {\n        const {metricSelected} = this.props;\n        if (_.isEmpty(metricSelected)) {\n            return {};\n        }\n        if (_.isEmpty(metricSelected.params)) {\n            return {};\n        }\n        const params = {}\n        metricSelected.params.map(param => {\n            params[param.name] = param.value;\n        })\n        return params;\n    }\n\n    render() {\n        const {metricCategories, loading, metricSelected} = this.props;\n        const finished = this.initSelectedFinished();\n        return (\n            <Layout className={styles.stepLayout}>\n                {\n                    finished && <Spin spinning={loading || !finished}>\n                        <Layout>\n                            <Sider>\n                                {\n                                    metricCategories.length > 0 && <Tree\n                                        defaultExpandAll={true}\n                                        defaultSelectedKeys={[this.getMetricSelectedKey()]}\n                                        onSelect={this.onMetricSelect.bind(this)}\n                                    >\n                                        {this.metricCategoryTreeRender(metricCategories)}\n                                    </Tree>\n                                }\n                            </Sider>\n                            <Layout>\n                                <Content>\n                                    {\n                                        _.isEmpty(metricSelected) ? <div></div> :\n                                            _.isEmpty(metricSelected.params) ? '无参数' :\n                                                <Form {...FormLayout} ref={this.metricForm}\n                                                      // onFinish={this.onFinish()}\n                                                      initialValues={this.getMetricInitialValues()}>\n                                                    {metricSelected.params.map(param =>\n                                                        <Form.Item label={param.name} name={param.name}\n                                                                   rules={[{required: param.required ? true : false}]}>\n                                                            <Input placeholder={param.code}/>\n                                                        </Form.Item>\n                                                    )}\n                                                    <Form.Item label={'监控名称'} name={'metricName'}>\n                                                        <Input placeholder={metricSelected.name}/>\n                                                    </Form.Item>\n                                                </Form>\n                                    }\n                                </Content>\n                            </Layout>\n                        </Layout>\n                    </Spin>\n                }\n            </Layout>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const experiment = state.experimentCreating.toJS();\n    return {\n        loading: experiment.loading,\n        dimension: experiment.dimension,\n        metricCategories: experiment.metricCategories,\n        metricSelected: experiment.metricSelected,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clearResult: () => dispatch(Actions.clearExperimentCreatingResult()),\n        queryMetricCategory: query => dispatch(Actions.queryMetricCategory(query)),\n        onMetricChanged: metric => dispatch(Actions.onMetricChanged(metric)),\n        handleError: (code, message) => dispatch(Actions.handleError(code, message)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MonitorStep);","/*\n * Copyright 1999-2021 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport React from \"react\";\nimport {Form, Input} from \"antd\";\nimport Actions from \"../../../actions/Actions\";\nimport {connect} from \"react-redux\";\nimport _ from \"lodash\";\n\nconst FormLayout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 16},\n};\n\nclass NameStep extends React.Component {\n    experimentNameForm = React.createRef();\n\n    constructor(props) {\n        super(props);\n    }\n\n    onExperimentNameFormChange = () => {\n        if (this.experimentNameForm.current) {\n            this.experimentNameForm.current.validateFields()\n                .then(values => {\n                    const {onExperimentNameChanged} = this.props;\n                    onExperimentNameChanged({name: values['experimentName']});\n                })\n        }\n    }\n\n    getExperimentName = () => {\n        const {experimentName, dimension, scenarioSelected, onExperimentNameChanged} = this.props;\n        if (!_.isEmpty(experimentName)) {\n            return experimentName;\n        }\n        const values = [];\n        if (!_.isEmpty(dimension)) {\n            values.push(dimension);\n        }\n        if (!_.isEmpty(scenarioSelected)) {\n            values.push(scenarioSelected.name);\n        }\n        values.push(new Date().getTime());\n        let name = _.join(values, \"-\");\n        onExperimentNameChanged({name});\n        return name;\n    }\n\n    render() {\n        const experimentName = this.getExperimentName();\n        return (\n            <div style={{marginTop: 30}}>\n                <Form {...FormLayout} ref={this.experimentNameForm} name=\"experimentForm\"\n                      onChange={this.onExperimentNameFormChange}\n                      initialValues={{experimentName: experimentName}}>\n                    <Form.Item name=\"experimentName\" label=\"实验名称\" help={\"不填写时使用默认值\"}>\n                        <Input placeholder={experimentName}/>\n                    </Form.Item>\n                </Form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const experiment = state.experimentCreating.toJS();\n    return {\n        loading: experiment.loading,\n        dimension: experiment.dimension,\n        experimentName: experiment.experimentName,\n        scenarioSelected: experiment.scenarioSelected,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onExperimentNameChanged: name => dispatch(Actions.onExperimentNameChanged(name)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NameStep);","/*\n * Copyright 1999-2021 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport {Button, Divider, Steps} from \"antd\";\nimport styles from \"./index.module.scss\";\nimport Actions from \"../../../actions/Actions\";\nimport {connect} from \"react-redux\";\nimport ExperimentCreating from \"./index\";\nimport ScenarioStep from \"./ScenarioStep\";\nimport MonitorStep from \"./MonitorStep\";\nimport NameStep from \"./NameStep\";\nimport _ from \"lodash\";\nimport {FormattedMessage} from \"react-intl\";\n\nconst {Step} = Steps;\n\nconst StepsConfig = [\n    {\n        title: 'page.experiment.creating.step.title.resource',\n        description: 'page.item.required.true',\n    },\n    {\n        title: 'page.experiment.creating.step.title.scenario',\n        description: 'page.item.required.true',\n    },\n    {\n        title: 'page.experiment.creating.step.title.monitor',\n        description: 'page.item.required.false',\n    },\n    {\n        title: 'page.experiment.creating.step.title.name',\n        description: 'page.item.required.false',\n    },\n]\n\nclass ExperimentSteps extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n    }\n\n    onCreatingTabChange = current => {\n        this.setState({current});\n    }\n\n    machineEvent = child => {\n        this._machine = child;\n    }\n    scenarioEvent = child => {\n        this._scenario = child;\n    }\n    monitorEvent = child => {\n        this._monitor = child;\n    }\n\n    changeCurrent(current) {\n        this.setState({current});\n    }\n\n    componentWillUnmount() {\n        const {clearResult} = this.props;\n        clearResult();\n    }\n\n    submitMachineForm(current) {\n        const {machineForm} = this.props;\n        if (!_.isEmpty(machineForm)) {\n            machineForm.submit();\n        }\n        this.changeCurrent(current);\n    }\n\n    onCreatingNext = () => {\n        const current = this.state.current + 1;\n        switch (current) {\n            case 1:\n                this.submitMachineForm(current);\n                break;\n            case 2:\n                this._scenario.onFinish(this.changeCurrent.bind(this, current));\n                break;\n            case 3:\n                this._monitor.onFinish(this.changeCurrent.bind(this, current));\n                break;\n            default:\n                this.changeCurrent(current);\n        }\n    }\n\n    onCreatingPre = () => {\n        const current = this.state.current - 1;\n        this.setState({current});\n    }\n\n    getMachines = () => {\n        const {machinesSelected} = this.props;\n        const machines = [];\n        machinesSelected.map(target => {\n            const values = _.split(target, \"-\")\n            machines.push({\n                machineId: values[0],\n                ip: values[1],\n            })\n        })\n        return machines;\n    }\n\n    createExperiment = () => {\n        const {\n            scenarioSelected,\n            metricSelected,\n            experimentName,\n            dimension,\n            createExperiment,\n            collect,\n            scenarioCategoryIdSelected,\n            machinesSelected\n        } = this.props;\n        createExperiment({\n            categoryId: scenarioCategoryIdSelected,\n            scenarioId: scenarioSelected.scenarioId,\n            parameters: scenarioSelected.parameters,\n            metrics: metricSelected ? [metricSelected] : [],\n            experimentName,\n            machines: machinesSelected,\n            dimension,\n            collect,\n        });\n    }\n\n    updateExperiment = () => {\n        const {\n            scenarioSelected,\n            metricSelected,\n            experimentName,\n            dimension,\n            updateExperiment,\n            collect,\n            scenarioCategoryIdSelected,\n            machinesSelected\n        } = this.props;\n        updateExperiment({\n            experimentId: ExperimentCreating.getExperimentId(),\n            categoryId: scenarioCategoryIdSelected,\n            scenarioId: scenarioSelected.scenarioId,\n            parameters: scenarioSelected.parameters,\n            metrics: metricSelected ? [metricSelected] : [],\n            experimentName,\n            machines: machinesSelected,\n            dimension,\n            collect,\n        })\n    }\n\n    render() {\n        const {machineStep, dimension} = this.props;\n        const {current} = this.state;\n        const id = ExperimentCreating.getExperimentId();\n        return (\n            <div>\n                <Steps direction=\"horizontal\" size=\"default\" current={current}\n                >\n                    {\n                        StepsConfig.map(s => {\n                            return <Step title={<FormattedMessage id={s.title}/>}\n                                         description={<span><FormattedMessage id={s.description}/></span>}/>;\n                        })\n                    }\n                </Steps>\n                <div className={styles.stepContent}>\n                    {\n                        current === 0 ?\n                            <div className={styles.fadeIn}>\n                                {\n                                    // React.cloneElement(\n                                    //     machineStep,\n                                    //     {dimension, current, event: this.machineEvent}\n                                    // )\n                                    // // <Element dimension={dimension} current={current} event={this.machineEvent}/>\n                                    machineStep\n                                }\n\n                            </div>\n                            :\n                            <div className={styles.step}></div>\n                    }\n                    {\n                        current === 1 ?\n                            <div className={styles.fadeIn}>\n                                <ScenarioStep dimension={dimension} current={current} event={this.scenarioEvent}/>\n                            </div>\n                            :\n                            <div className={styles.step}></div>\n                    }\n                    {\n                        current === 2 ?\n                            <div className={styles.fadeIn}>\n                                <MonitorStep dimension={dimension} current={current} event={this.monitorEvent}/>\n                            </div>\n                            :\n                            <div className={styles.step}></div>\n                    }\n                    {\n                        current === 3 ?\n                            <div className={styles.fadeIn}>\n                                <NameStep dimension={dimension} current={current}/>\n                            </div>\n                            :\n                            <div className={styles.step}></div>\n                    }\n                </div>\n                <Divider dashed/>\n                <div className={styles.stepsAction}>\n                    {current > 0 && (\n                        <Button style={{marginRight: 8}} onClick={() => this.onCreatingPre()}>\n                            上一步\n                        </Button>\n                    )}\n                    {current < StepsConfig.length - 1 && (\n                        <Button type=\"primary\" onClick={() => this.onCreatingNext()}>\n                            下一步\n                        </Button>\n                    )}\n                    {current === StepsConfig.length - 1 && (\n                        id ?\n                            <Button\n                                type=\"primary\"\n                                onClick={() => this.updateExperiment()}\n                            >\n                                更新实验\n                            </Button>\n                            :\n                            <Button\n                                type=\"primary\"\n                                onClick={() => this.createExperiment()}\n                            >\n                                创建实验\n                            </Button>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const experiment = state.experimentCreating.toJS();\n    return {\n        loading: experiment.loading,\n        experimentName: experiment.experimentName,\n        categories: experiment.categories || [],\n        scenarios: experiment.scenarios.scenarios || [],\n        scenarioSelected: experiment.scenarioSelected,\n        dimension: experiment.dimension,\n        metricCategories: experiment.metricCategories,\n        metricSelected: experiment.metricSelected,\n        machinesSelected: experiment.machinesSelected,\n        scenarioCategoryIdSelected: experiment.scenarioCategoryIdSelected,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clearResult: () => dispatch(Actions.clearExperimentCreatingResult()),\n        createExperiment: experiment => dispatch(Actions.createExperiment(experiment)),\n        updateExperiment: experiment => dispatch(Actions.updateExperiment(experiment)),\n        onMachinesChanged: machines => dispatch(Actions.onMachinesChanged(machines))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExperimentSteps);","/*\n * Copyright 1999-2021 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport styles from \"./index.module.scss\";\nimport {Spin, Transfer} from \"antd\";\nimport _ from \"lodash\";\nimport {connect} from \"react-redux\";\nimport Actions from \"../../../actions/Actions\";\nimport {ExperimentCreatingTabKey} from \"../../../constants/ExperimentConstants\";\n\nclass MachineStep extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.creatingFromMachine();\n    }\n\n    creatingFromMachine() {\n        if (_.isEmpty(this.props.location)) {\n            return false;\n        }\n        const {dimension, machineId, machineIp} = this.props.location;\n        const {creatingFromMachine, clearResult} = this.props;\n        if (dimension && machineId && machineIp) {\n            clearResult();\n            creatingFromMachine({dimension, machineIp, machineId});\n            return true;\n        }\n        return false;\n    }\n\n    transferFilter = (inputValue, option) => {\n        return option.description.indexOf(inputValue) > -1;\n    };\n\n    getTargetKeys = () => {\n        const {machinesSelected, dimension} = this.props;\n        if (_.isEmpty(machinesSelected)) {\n            return [];\n        }\n        let keys = [];\n        switch (dimension) {\n            case ExperimentCreatingTabKey.HOST:\n                machinesSelected.map(machine => {\n                    keys.push(_.join([machine.machineId, machine.ip], '/'));\n                });\n                break;\n            case ExperimentCreatingTabKey.NODE:\n                machinesSelected.map(machine => {\n                    keys.push(machine.nodeName);\n                });\n                break;\n            case ExperimentCreatingTabKey.POD:\n                machinesSelected.map(machine => {\n                    keys.push(_.join([machine.namespace, machine.podName], '/'));\n                });\n                break;\n            case ExperimentCreatingTabKey.CONTAINER:\n                machinesSelected.map(machine => {\n                    keys.push(_.join([machine.namespace, machine.podName, machine.containerName], '/'));\n                });\n                break;\n        }\n        return keys;\n    }\n\n    transferChange = (targetKeys) => {\n        const {onMachinesChanged, dimension} = this.props;\n        let machines = [];\n        switch (dimension) {\n            case ExperimentCreatingTabKey.HOST:\n                targetKeys.map(key => {\n                    let resources = _.split(key, '/');\n                    if (_.isEmpty(resources[0]) || _.isEmpty(resources[1])) {\n                        return;\n                    }\n                    machines.push({machineId: resources[0], ip: resources[1]});\n                })\n                break;\n            case ExperimentCreatingTabKey.NODE:\n                targetKeys.map(key => {\n                    machines.push({nodeName: key})\n                })\n                break;\n            case ExperimentCreatingTabKey.POD:\n            case ExperimentCreatingTabKey.CONTAINER:\n                targetKeys.map(key => {\n                    let resources = _.split(key, '/');\n                    if (resources.length === 2) {\n                        machines.push({\n                            namespace: resources[0],\n                            podName: resources[1],\n                        })\n                    } else if (resources.length === 3) {\n                        machines.push({\n                            namespace: resources[0],\n                            podName: resources[1],\n                            containerName: resources[2],\n                        })\n                    }\n                })\n                break;\n        }\n        onMachinesChanged({machines: machines});\n    }\n\n    render() {\n        const {titles, machines, pagination, loading} = this.props\n        return (\n            <div className={styles.stepMachineContent}>\n                <Spin spinning={loading}>\n                    <Transfer\n                        dataSource={machines}\n                        showSearch\n                        targetKeys={this.getTargetKeys()}\n                        onChange={this.transferChange}\n                        filterOption={this.transferFilter}\n                        render={item => item.title}\n                        listStyle={{width: 510, height: 400}}\n                        titles={titles}\n                        pagination\n                    />\n                </Spin>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const creating = state.experimentCreating.toJS();\n    return {\n        loading: creating.loading,\n        machinesSelected: creating.machinesSelected,\n        dimension: creating.dimension,\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clearResult: () => dispatch(Actions.clearExperimentCreatingResult()),\n        creatingFromMachine: machine => dispatch(Actions.creatingFromMachine(machine)),\n        onMachinesChanged: machines => dispatch(Actions.onMachinesChanged(machines)),\n        handleError: (code, message) => dispatch(Actions.handleError(code, message)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MachineStep);\n\n","/*\n * Copyright 1999-2021 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport ExperimentSteps from \"./ExperimentSteps\";\nimport {Alert} from \"antd\";\nimport Actions from \"../../../actions/Actions\";\nimport MachineStep from \"./MachineStep\";\nimport {GenPagination} from \"../../../libs/Pagination\";\nimport {FormattedMessage} from \"react-intl\";\n\nconst pageSize = 24;\n\nclass HostExperiment extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dimension: \"host\",\n            query: props.query || {},\n        }\n    }\n\n    componentDidMount() {\n        const {page, getMachinesForHostPageable} = this.props\n        getMachinesForHostPageable({page, pageSize});\n    }\n\n    render() {\n        const {page, total, machines, getMachinesForHostPageable} = this.props\n        return (\n            <ExperimentSteps\n                dimension=\"host\"\n                machineStep={\n                    <div>\n                        <Alert style={{textAlign: \"center\"}}\n                               message={<FormattedMessage id={'page.experiment.creating.resource.host.alert.message'}/>}\n                               type=\"info\" showIcon closable/>\n                        <MachineStep\n                            machines={machines}\n                            pagination={GenPagination(page, pageSize, total,\n                                (page, pageSize) => getMachinesForHostPageable({page, pageSize}))}\n                            // titles={\n                            //     [<a onClick={() => {\n                            //         console.log(\"遇到问题点我查看？\")\n                            //     }}>切换成主机名称</a>]}\n                        />\n                    </div>\n                }\n            />\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const experimentCreating = state.experimentCreating.toJS();\n    const {hosts} = experimentCreating\n    return {\n        machines: hosts.machines,\n        page: hosts.page,\n        total: hosts.total,\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getMachinesForHostPageable: query => dispatch(Actions.getMachinesForHostPageable({...query, original: \"host\"})),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HostExperiment);","export default __webpack_public_path__ + \"static/media/linux.90f8b1a6.svg\";","export default __webpack_public_path__ + \"static/media/kubernetes.90835154.svg\";","export default __webpack_public_path__ + \"static/media/application.e54281ed.svg\";","/*\n * Copyright 1999-2021 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport Actions from \"../../../actions/Actions\";\nimport {\n    BorderOutlined,\n    ContainerOutlined,\n    MinusCircleOutlined,\n    PlusOutlined,\n    QuestionCircleOutlined,\n    RobotOutlined\n} from \"@ant-design/icons\";\nimport {Alert, Button, Form, Input, Layout, Menu, Space, Tabs, Tooltip} from \"antd\";\nimport {connect} from \"react-redux\";\nimport ExperimentSteps from \"./ExperimentSteps\";\nimport MachineStep from \"./MachineStep\";\nimport {GenPagination} from \"../../../libs/Pagination\";\nimport ExperimentCreating from \"./index\";\nimport _ from 'lodash'\nimport {ExperimentCreatingTabKey} from \"../../../constants/ExperimentConstants\";\nimport {FormattedMessage} from \"react-intl\";\n\nconst {TabPane} = Tabs\nconst {TextArea} = Input\nconst {SubMenu} = Menu\nconst {Content, Sider} = Layout;\n\nconst FormLayout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 12},\n};\nconst NodeNameTips = <FormattedMessage id={'page.experiment.creating.node.name.tips'}/>;\nconst PodNamespaceTips = <FormattedMessage id={'page.experiment.creating.pod.namespace.tips'}/>;\nconst PodNameTips = <FormattedMessage id={'page.experiment.creating.pod.name.tips'}/>;\nconst ContainerNameTips = <FormattedMessage id={'page.experiment.creating.container.name.tips'}/>;\nconst EnableCollectAlert =\n    <Alert style={{textAlign: \"center\"}}\n           message={<FormattedMessage id={'page.experiment.creating.resource.k8s.collect.alert.message'}/>} type=\"info\"\n           showIcon closable/>;\nconst DisableCollectAlert =\n    <Alert style={{textAlign: \"center\"}}\n           message={<FormattedMessage id={'page.experiment.creating.resource.k8s.alert.message'}/>} type=\"warning\"\n           showIcon closable/>;\n\nconst defaultActive = \"pod\";\n\nclass KubernetesExperiment extends React.Component {\n\n    containerFormRef = React.createRef();\n    podFormRef = React.createRef();\n    nodeFormRef = React.createRef();\n\n    constructor() {\n        super();\n    }\n\n    getMachinesByDimension(activeKey) {\n        const {\n            getPodsPageable,\n            getNodesPageable,\n            podPage,\n            podPageSize,\n            nodePage,\n            nodePageSize\n        } = this.props;\n        switch (activeKey) {\n            case ExperimentCreatingTabKey.NODE:\n                getNodesPageable({page: nodePage, pageSize: nodePageSize});\n                break;\n            case ExperimentCreatingTabKey.CONTAINER:\n            case ExperimentCreatingTabKey.POD:\n                getPodsPageable({page: podPage, pageSize: podPageSize});\n        }\n    }\n\n    componentDidMount() {\n        const {\n            getClusterInfo,\n            queryCollectStatus,\n            onDimensionChanged,\n            dimension\n        } = this.props\n        const id = ExperimentCreating.getExperimentId();\n        queryCollectStatus();\n        getClusterInfo();\n        let activeKey = dimension;\n        if (_.isEmpty(id) && _.isEmpty(dimension)) {\n            activeKey = defaultActive\n            onDimensionChanged({dimension: activeKey});\n        }\n        this.getMachinesByDimension(activeKey);\n    }\n\n    onFinish = (values) => {\n        const {onMachinesChanged} = this.props;\n        onMachinesChanged({machines: values.machines});\n    }\n\n    collectContainersEnabledRender = () => {\n        const {podPage, podPageSize, podTotal, containers, getPodsPageable} = this.props;\n        return (\n            <MachineStep\n                machines={containers}\n                pagination={GenPagination(podPage, podPageSize, podTotal,\n                    (page, pageSize) => getPodsPageable({page, pageSize}))}\n                titles={\n                    [\n                        <div style={{display: \"inline-block\"}}>\n                            {/*<a onClick={() => {*/}\n                            {/*    console.log(\"遇到问题点我查看？\")*/}\n                            {/*}}>切换成名称</a>*/}\n                            {/*<Divider type={\"vertical\"}/>*/}\n                            <FormattedMessage id={'page.experiment.creating.resource.disabled.message'}/>&nbsp;\n                            <Tooltip title={<FormattedMessage id={'page.experiment.creating.resource.disabled.tips'}/>}>\n                                <QuestionCircleOutlined/>\n                            </Tooltip>\n                        </div>\n                    ]}\n            />\n        );\n    }\n\n    collectDisabledRender = (formRef) => {\n        const {dimension, machinesSelected} = this.props;\n        return (\n            <div>\n                <Form ref={formRef} name=\"control-ref\" onFinish={this.onFinish}\n                      initialValues={{machines: machinesSelected}}>\n                    <Form.List name={'machines'}>\n                        {\n                            (fields, {add, remove}) => (\n                                <>\n                                    {\n                                        fields.map(field => (\n                                            dimension === ExperimentCreatingTabKey.NODE ?\n                                                <Space key={field.key} style={{padding: 16}} align=\"baseline\">\n                                                    <Form.Item {...field}\n                                                               fieldKey={[field.fieldKey, 'nodeName']}\n                                                               name={[field.name, 'nodeName']}\n                                                               label=\"nodeName\"\n                                                               help={NodeNameTips}\n                                                               rules={[{required: true}]}>\n                                                        <Input/>\n                                                    </Form.Item>\n                                                    <MinusCircleOutlined onClick={() => remove(field.name)}/>\n                                                </Space>\n                                                :\n                                                <Space key={field.key} style={{padding: 16}} align=\"baseline\">\n                                                    <Form.Item {...field}\n                                                               fieldKey={[field.fieldKey, 'namespace']}\n                                                               name={[field.name, 'namespace']}\n                                                               label=\"namespace\"\n                                                               help={PodNamespaceTips}\n                                                               rules={[{required: true}]}>\n                                                        <Input/>\n                                                    </Form.Item>\n                                                    <Form.Item {...field}\n                                                               fieldKey={[field.fieldKey, 'podName']}\n                                                               name={[field.name, 'podName']}\n                                                               label=\"podName\"\n                                                               help={PodNameTips}\n                                                               rules={[{required: true}]}>\n                                                        <Input/>\n                                                    </Form.Item>\n                                                    {\n                                                        dimension === ExperimentCreatingTabKey.CONTAINER\n                                                            ?\n                                                            <Form.Item {...field}\n                                                                       fieldKey={[field.fieldKey, 'containerName']}\n                                                                       name={[field.name, 'containerName']}\n                                                                       label=\"containerName\"\n                                                                       help={ContainerNameTips}\n                                                                       rules={[{required: false}]}>\n                                                                <Input/>\n                                                            </Form.Item>\n                                                            :\n                                                            <></>\n                                                    }\n                                                    <MinusCircleOutlined onClick={() => remove(field.name)}/>\n                                                </Space>\n                                        ))\n                                    }\n                                    <Form.Item>\n                                        <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined/>}>\n                                            Add field\n                                        </Button>\n                                    </Form.Item>\n                                </>\n                            )\n                        }\n                    </Form.List>\n                </Form>\n            </div>\n        )\n    }\n\n    collectPodsEnabledRender = () => {\n        const {podPage, podPageSize, podTotal, pods, getPodsPageable} = this.props;\n        return (\n            <MachineStep\n                machines={pods}\n                pagination={GenPagination(podPage, podPageSize, podTotal,\n                    (page, pageSize) => getPodsPageable({page, pageSize}))}\n                titles={\n                    [\n                        <div style={{display: \"inline-block\"}}>\n                            {/*<a onClick={() => {*/}\n                            {/*    console.log(\"遇到问题点我查看？\")*/}\n                            {/*}}>切换成Pod名称</a>*/}\n                            {/*<Divider type={\"vertical\"}/>*/}\n                            <FormattedMessage id={'page.experiment.creating.resource.disabled.message'}/>&nbsp;\n                            <Tooltip title={<FormattedMessage id={'page.experiment.creating.resource.disabled.tips'}/>}>\n                                <QuestionCircleOutlined/>\n                            </Tooltip>\n                        </div>\n                    ]}/>\n        );\n    };\n\n    collectNodesEnabledRender = () => {\n        const {nodePage, nodePageSize, nodeTotal, nodes, getNodesPageable} = this.props;\n        return (\n            <MachineStep\n                machines={nodes}\n                pagination={GenPagination(nodePage, nodePageSize, nodeTotal,\n                    (page, pageSize) => getNodesPageable({page, pageSize}))}\n                titles={\n                    [\n                        <div style={{display: \"inline-block\"}}>\n                            {/*<a onClick={() => {*/}\n                            {/*    console.log(\"遇到问题点我查看？\")*/}\n                            {/*}}>切换成节点名称</a>*/}\n                            {/*<Divider type={\"vertical\"}/>*/}\n                            <FormattedMessage id={'page.experiment.creating.resource.disabled.message'}/>&nbsp;\n                            <Tooltip title={<FormattedMessage id={'page.experiment.creating.resource.disabled.tips'}/>}>\n                                <QuestionCircleOutlined/>\n                            </Tooltip>\n                        </div>\n                    ]}/>\n        );\n    };\n\n    machinesRender = () => {\n        const {collect, dimension} = this.props;\n        return (\n            dimension ?\n                <Tabs defaultActiveKey={dimension} onChange={this.onTargetTabChange}>\n                    <TabPane tab={<span><ContainerOutlined/><FormattedMessage\n                        id={'page.experiment.creating.container.title'}/></span>} key=\"container\">\n                        {\n                            collect ? this.collectContainersEnabledRender() : this.collectDisabledRender(this.containerFormRef)\n                        }\n                    </TabPane>\n                    <TabPane tab={<span><BorderOutlined/><FormattedMessage\n                        id={'page.experiment.creating.pod.title'}/></span>} key=\"pod\">\n                        {\n                            collect ? this.collectPodsEnabledRender() : this.collectDisabledRender(this.podFormRef)\n                        }\n                    </TabPane>\n                    <TabPane tab={<span><RobotOutlined/><FormattedMessage\n                        id={'page.experiment.creating.node.title'}/></span>} key=\"node\">\n                        {\n                            collect ? this.collectNodesEnabledRender() : this.collectDisabledRender(this.nodeFormRef)\n                        }\n                    </TabPane>\n                </Tabs>\n                :\n                <div></div>\n        );\n    }\n\n    onTargetTabChange = current => {\n        const {onDimensionChanged, clearResult} = this.props;\n        this.getMachinesByDimension(current);\n        onDimensionChanged({dimension: current});\n        clearResult();\n    }\n\n    render() {\n        const {collect, dimension} = this.props;\n        let formRef = null;\n        switch (dimension) {\n            case ExperimentCreatingTabKey.NODE:\n                formRef = this.nodeFormRef;\n                break;\n            case ExperimentCreatingTabKey.POD:\n                formRef = this.podFormRef;\n                break;\n            case ExperimentCreatingTabKey.CONTAINER:\n                formRef = this.containerFormRef;\n                break;\n        }\n        return (\n            dimension ?\n                <ExperimentSteps dimension={dimension}\n                                 machineForm={formRef ? formRef.current : null}\n                                 machineStep={\n                                     <div>\n                                         {collect ? EnableCollectAlert : DisableCollectAlert}\n                                         {this.machinesRender()}\n                                     </div>\n                                 }\n                /> :\n                <div></div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const experiment = state.experimentCreating.toJS();\n    const {pods, nodes} = experiment;\n    return {\n        podPage: pods.page,\n        podPageSize: pods.pageSize,\n        podTotal: pods.total,\n        pods: pods.machines,\n        containers: pods.containers,\n        nodePage: nodes.page,\n        nodePageSize: nodes.pageSize,\n        nodeTotal: nodes.total,\n        nodes: nodes.machines,\n        collect: experiment.collect,\n        dimension: experiment.dimension,\n        machinesSelected: experiment.machinesSelected\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getClusterInfo: () => dispatch(Actions.getClusterInfo()),\n        getKubernetesNamespaces: () => dispatch(Actions.getKubernetesNamespaces()),\n        getPodsPageable: query => dispatch(Actions.getMachinesForPodPageable(query)),\n        getNodesPageable: query => dispatch(Actions.getMachinesForNodePageable(query)),\n        queryCollectStatus: () => dispatch(Actions.queryCollectStatus()),\n        onDimensionChanged: dimension => dispatch(Actions.onDimensionChanged(dimension)),\n        onMachinesChanged: machines => dispatch(Actions.onMachinesChanged(machines)),\n        clearResult: () => dispatch(Actions.clearExperimentCreatingResult()),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(KubernetesExperiment);","/*\n * Copyright 1999-2021 Alibaba Group Holding Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport {Card, Col, Row, Tabs} from \"antd\";\nimport {FormattedMessage} from \"react-intl\";\nimport HostExperiment from \"./HostExperiment\";\nimport * as request from \"../../Machine/libs/request\";\nimport _ from 'lodash'\nimport {connect} from \"react-redux\";\nimport Actions from \"../../../actions/Actions\";\nimport queryString from \"query-string\";\nimport linuxLogo from '../../../assets/images/experiment/linux.svg'\nimport kubernetesLogo from '../../../assets/images/experiment/kubernetes.svg'\nimport applicationLogo from '../../../assets/images/experiment/application.svg'\nimport styles from './index.module.scss';\nimport KubernetesExperiment from \"./KubernetesExperiment\";\nimport {ExperimentCreatingTabKey} from \"../../../constants/ExperimentConstants\";\n\nconst {TabPane} = Tabs\n\nconst ExperimentDimensions = [\n    {\n        title: \"page.experiment.creating.host.dimension.name\",\n        key: \"host\",\n        imgAlt: \"host\",\n        imgSrc: linuxLogo,\n        content: <HostExperiment/>,\n    },\n    {\n        title: \"page.experiment.creating.kubernetes.dimension.name\",\n        key: \"kubernetes\",\n        imgAlt: \"kubernetes\",\n        imgSrc: kubernetesLogo,\n        content: <KubernetesExperiment/>,\n    },\n    {\n        title: \"page.experiment.creating.application.dimension.name\",\n        key: \"application\",\n        imgAlt: \"application\",\n        imgSrc: applicationLogo,\n        content: <h1>Coming soon...</h1>,\n    },\n]\n\n\nclass ExperimentCreating extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: null,\n            experimentId: null,\n            finished: false,\n        }\n    }\n\n    static getExperimentId() {\n        const parsed = queryString.parse(window.location.search);\n        const {id} = parsed;\n        return id;\n    }\n\n    static getDerivedStateFromProps(nextProps) {\n        const {history, experimentId, clearResult, finished} = nextProps;\n        if (finished && !_.isEmpty(experimentId)) {\n            clearResult();\n            history.push(`/experiment/detail/?${request.generateUrlSearch({id: experimentId})}`);\n        }\n        return null;\n    }\n\n    componentDidMount() {\n        const {getExperimentById} = this.props;\n        const id = ExperimentCreating.getExperimentId();\n        if (!_.isEmpty(id)) {\n            getExperimentById(id);\n        }\n    }\n\n    onTabChange(key) {\n        const {dimension, onDimensionChanged, clearResult} = this.props;\n        if (key !== dimension) {\n            if (key === ExperimentCreatingTabKey.KUBERNETES) {\n                key = ExperimentCreatingTabKey.POD;\n            }\n            onDimensionChanged({dimension: key});\n        }\n        clearResult();\n        if (key === ExperimentCreatingTabKey.HOST) {\n            const {page, getMachinesForHostPageable} = this.props\n            getMachinesForHostPageable({page, pageSize: 24});\n        }\n    }\n\n    getTabKey() {\n        const {dimension, onDimensionChanged} = this.props;\n        const id = ExperimentCreating.getExperimentId();\n        let activeKey = dimension;\n        if (_.isEmpty(id) && _.isEmpty(dimension)) {\n            activeKey = ExperimentCreatingTabKey.DEFAULT;\n            onDimensionChanged({dimension: activeKey});\n        } else if (!_.isEmpty(id) && _.isEmpty(dimension)) {\n            activeKey = ''\n        } else if (activeKey === ExperimentCreatingTabKey.CONTAINER || activeKey === ExperimentCreatingTabKey.POD ||\n            activeKey === ExperimentCreatingTabKey.NODE) {\n            activeKey = ExperimentCreatingTabKey.KUBERNETES;\n        }\n        return activeKey;\n    }\n\n    render() {\n        const activeKey = this.getTabKey();\n        return (\n            <div>\n                <h1>{<FormattedMessage id={'page.experiment.creating.dimension'}/>}</h1>\n                <div className={styles.experimentHeader}>\n                    {activeKey ?\n                        <Row>\n                            <Tabs defaultActiveKey={activeKey} className={styles.stepTab}\n                                  onChange={this.onTabChange.bind(this)}>\n                                {\n                                    ExperimentDimensions.map(item => (\n                                            <TabPane\n                                                tab={\n                                                    <Col span={4}>\n                                                        <Card\n                                                            style={{width: 300}}\n                                                            bordered={true}\n                                                            hoverable={true}\n                                                            title={\n                                                                <>\n                                                                    <FormattedMessage id={item.title}/>\n                                                                </>\n                                                            }\n                                                            cover={<img alt={item.imgAlt} src={item.imgSrc}\n                                                                        style={{\n                                                                            width: 296,\n                                                                            height: 182\n                                                                        }}/>}\n                                                        />\n                                                    </Col>\n                                                }\n                                                key={item.key}>\n                                                {item.content}\n                                            </TabPane>\n                                        )\n                                    )\n                                }\n                            </Tabs>\n                        </Row>\n                        :\n                        <Row/>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const experiment = state.experimentCreating.toJS();\n    return {\n        dimension: experiment.dimension,\n        experimentId: experiment.experimentId,\n        finished: experiment.finished,\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        clearResult: () => dispatch(Actions.clearExperimentCreatingResult()),\n        onDimensionChanged: dimension => dispatch(Actions.onDimensionChanged(dimension)),\n        getExperimentById: experimentId => dispatch(Actions.getExperimentById(experimentId)),\n        getMachinesForHostPageable: query => dispatch(Actions.getMachinesForHostPageable({...query, original: \"host\"})),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExperimentCreating);"],"sourceRoot":""}